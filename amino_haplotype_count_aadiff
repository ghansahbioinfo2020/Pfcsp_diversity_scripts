#!/usr/bin/python

import os
import sys
from optparse import OptionParser

#
# Counting amino acid haplotypes in a population
# Usage:
#			./amino_haplotype_count --help
# 
#


def println(msg):
	sys.stderr.write(msg.strip()+'\n')
	
def haplotype_difference(rhap, hap):
	cc = 0
	for i in range(len(rhap)):
		if not rhap[i] == hap[i]:
			cc += 1
	return cc
	
def count_haplotypes(samples, aminos, start, end, window, step):
	'''
	Counting the haplotypes in population data
	'''
	if end == -1:
		end = len(aminos[1])
	if window == -1:
		window = end - start + 1
	if step == -1:
		step = window
	
	results = []
	regions = []
	s = start - 1 # starting point
	rc = 0 # region identifier
	while(True):
		if s >= end: break
		e = s + window
		if e > end: e = end - 1
		tmp = []
		rc += 1
		nh = 0 # number of haplotypes per region
		rhap = '' # reference haplotype
		for i in range(len(samples)):
			hap = aminos[i][s:e]
			isAdded = False
			for t in tmp:
				if t[0] == hap:
					t[1] += ', '+samples[i].strip()
					isAdded = True
					break
			if not isAdded:
				tmp.append([hap, samples[i].strip()])
				if rhap == '': rhap = hap
				nh += 1
		regions.append([rc, s+1, e, e-s, len(tmp)])
		for t in tmp:
			aa_diff = haplotype_difference(rhap, t[0]) # amino acids differences
			results.append([rc, t[0], s+1, e, e-s, len(t[1].split(',')), aa_diff, t[1]])
		s = s + step # next starting point
		
	return (regions, results)


def main():
	parser = OptionParser("./amino_haplotype_count --help")
	parser.add_option('-i', dest="inp", type=str, help="Input file (default is stdin)")
	parser.add_option('-o', dest="out", type=str, help="Results output file name (default is stdout)")
	parser.add_option('-s', dest="start", type=int, help="Position[inclusive] to start reading amino acids (default in 1)")
	parser.add_option('-e', dest="end", type=int, help="Position[inclusive] to stop reading amino acids (default is till the end)")
	parser.add_option('-w', dest="window", type=int, help="Window size for each haplotype (default is sequence lenght)")
	parser.add_option('--step', dest="step", type=int, help="Step size to move for the beginning for each haplotype (default is window size)")
	(options, args) = parser.parse_args()
	
	if sys.stdin.isatty() and not options.inp:
		println("Error: Specify an input file")
		parser.print_help() 
		sys.exit(1)
		
	if options.inp and not os.path.isfile(options.inp):
		println("Error: Input file does not exist.")
		sys.exit(1)
	
	start = 1
	if options.start:
		start = options.start
		
	end = -1
	if options.end:
		end = options.end
		
	if not end == -1 and start > end:
		println("Error: Start position cannot be greater than end position.")
		sys.exit(1)
		
	window = -1
	if options.window:
		window = options.window
		
	step = -1
	if options.step:
		step = options.step
		
	if not options.inp: inp = sys.stdin
	else: inp = open(options.inp, 'r')
	if options.out: out = open(options.out, 'w')
	else: out = sys.stdout
	
	samples = []
	aminos = []
	for line in inp:
		fg = line.strip().split("\t")
		if not len(fg) == 2: continue
		samples.append(fg[0].replace(' ','_').replace(',','_').strip())
		aminos.append(fg[1].replace(' ', '').strip())
		
	(regions, results) = count_haplotypes(samples, aminos, start, end, window, step)
	
	# write out haplotype region information
	out.write("Region\tStart\tEnd\tWidth\tNo_haps\n")
	for r in regions:
		out.write(str(r[0])+"\t"+str(r[1])+"\t"+str(r[2])+"\t"+str(r[3])+"\t"+str(r[4])+"\n")
	
	out.write("\n\n") # two empty lines for separation
	
	# write out Haplotype information
	out.write("Region\tUnique_hap\tStart\tEnd\tWidth\tHap_freq\tAA_diff\tHaplotypes\n")
	for r in results:
		out.write(str(r[0])+"\t"+r[1]+"\t"+str(r[2])+"\t"+str(r[3])+"\t"+str(r[4])+"\t"+str(r[5])+"\t"+str(r[6])+"\t"+r[7]+"\n")
		
	if options.inp: inp.close()
	if options.out: out.close()
		
if __name__ == "__main__":
	main()



